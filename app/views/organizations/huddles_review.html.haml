.container-fluid
  .row
    .col-12
      .d-flex.justify-content-between.align-items-center.mb-4
        %h1.mb-0 Huddles Review
        = link_to organization_path(@organization), class: "btn btn-outline-secondary" do
          %i.bi.bi-arrow-left.me-2
          Back to Organization
      
      / Date Range Filter
      .card.mb-4
        .card-body
          %h5.card-title Date Range
          = form_with url: huddles_review_organization_path(@organization), method: :get, local: true, class: "row g-3" do |form|
            .col-md-4
              = form.label :start_date, "Start Date", class: "form-label"
              = form.date_field :start_date, value: @start_date, class: "form-control"
            .col-md-4
              = form.label :end_date, "End Date", class: "form-label"
              = form.date_field :end_date, value: @end_date, class: "form-control"
            .col-md-4.d-flex.align-items-end
              = form.submit "Update Range", class: "btn btn-primary me-2"
              = link_to "Reset to 6 Weeks", huddles_review_organization_path(@organization), class: "btn btn-outline-secondary"
      
      / Summary Cards
      .row.mb-4
        .col-md-3
          .card.text-center
            .card-body
              %h3.card-title.text-primary= @overall_metrics[:total_huddles]
              %p.card-text Huddles
        .col-md-3
          .card.text-center
            .card-body
              %h3.card-title.text-success{data: {bs_toggle: "popover", bs_placement: "top", bs_trigger: "hover", bs_content: @overall_metrics[:distinct_participant_names].join(", "), bs_title: "Distinct Participants"}}= @overall_metrics[:distinct_participant_count]
              %p.card-text Distinct Participants
        .col-md-3
          .card.text-center
            .card-body
              %h3.card-title.text-info= @overall_metrics[:average_rating]
              %p.card-text Avg Rating
        .col-md-3
          .card.text-center
            .card-body
              %h3.card-title.text-warning= "#{@overall_metrics[:participation_rate]}%"
              %p.card-text Participation Rate
      
      / Charts Section
      .row.mb-4
        .col-12
          .card
            .card-header
              %h5.mb-0 Rating Trends
            .card-body
              #rating-chart{style: "height: 400px;"}
      
      .row.mb-4
        .col-md-6
          .card
            .card-header
              %h5.mb-0 Participation Rate
            .card-body
              #participation-chart{style: "height: 300px;"}
        .col-md-6
          .card
            .card-header
              %h5.mb-0 Huddles per Week
            .card-body
              #huddles-chart{style: "height: 300px;"}
      
      / Weekly Breakdown
      .row.mb-4
        .col-12
          .card
            .card-header
              %h5.mb-0 Weekly Breakdown
            .card-body
              .table-responsive
                %table.table.table-striped
                  %thead
                    %tr
                      %th Week Starting
                      %th Huddles
                      %th Distinct Participants
                      %th Feedbacks
                      %th Avg Rating
                      %th Participation Rate
                  %tbody
                    - @weekly_metrics.sort.reverse.each do |week_start, metrics|
                      %tr
                        %td= week_start.strftime("%B %d, %Y")
                        %td= metrics[:total_huddles]
                        %td{data: {bs_toggle: "popover", bs_placement: "top", bs_trigger: "hover", bs_content: metrics[:distinct_participant_names]&.join(", ") || "No participants", bs_title: "Distinct Participants"}}= metrics[:distinct_participant_count]
                        %td= metrics[:total_feedbacks]
                        %td= metrics[:average_rating]
                        %td= "#{metrics[:participation_rate]}%"
      
      / Conflict Style Distribution
      .row.mb-4
        .col-md-6
          .card
            .card-header
              %h5.mb-0 Personal Conflict Styles
            .card-body
              #personal-conflict-chart{style: "height: 300px;"}
        .col-md-6
          .card
            .card-header
              %h5.mb-0 Team Conflict Styles
            .card-body
              #team-conflict-chart{style: "height: 300px;"}
      
      / Rating Distribution
      .row.mb-4
        .col-12
          .card
            .card-header
              %h5.mb-0 Rating Distribution
            .card-body
              #rating-distribution-chart{style: "height: 300px;"}
      
      / Playbook Comparison Section
      - if @playbook_metrics.any?
        .row.mb-4
          .col-12
            .card
              .card-header
                %h5.mb-0 Playbook Comparison
              .card-body
                .table-responsive
                  %table.table.table-striped
                    %thead
                      %tr
                        %th Playbook
                        %th Organization
                        %th Huddles
                        %th Distinct Participants
                        %th Feedbacks
                        %th Avg Rating
                        %th Participation Rate
                        %th Actions
                    %tbody
                      - @playbook_metrics.sort_by { |playbook, metrics| -metrics[:average_rating] }.each do |playbook, metrics|
                        %tr
                          %td
                            %strong= link_to playbook.display_name, organization_huddle_playbook_path(playbook.organization, playbook), class: "text-decoration-none"
                            - if playbook.special_session_name.present?
                              %br
                              %small.text-muted= playbook.special_session_name
                          %td
                            %small= playbook.organization.display_name
                          %td= metrics[:total_huddles]
                          %td{data: {bs_toggle: "popover", bs_placement: "top", bs_trigger: "hover", bs_content: metrics[:distinct_participant_names]&.join(", ") || "No participants", bs_title: "Distinct Participants"}}= metrics[:distinct_participant_count]
                          %td= metrics[:total_feedbacks]
                          %td
                            %span{class: metrics[:average_rating] >= 16 ? 'text-success' : metrics[:average_rating] >= 12 ? 'text-warning' : 'text-danger'}
                              = metrics[:average_rating]
                          %td
                            %span{class: metrics[:participation_rate] >= 80 ? 'text-success' : metrics[:participation_rate] >= 60 ? 'text-warning' : 'text-danger'}
                              = "#{metrics[:participation_rate]}%"
                          %td
                            %button.btn.btn-sm.btn-outline-primary{type: "button", "data-bs-toggle": "modal", "data-bs-target": "#playbookModal", "data-playbook-id": playbook.id} View Details
      
      / Playbook Trends Chart
      - if @playbook_metrics.count > 1
        .row.mb-4
          .col-12
            .card
              .card-header
                %h5.mb-0 Playbook Rating Trends
              .card-body
                #playbook-trends-chart{style: "height: 400px;"}
      
      / Playbook Details Modal
      .modal.fade#playbookModal{tabindex: "-1", "aria-labelledby": "playbookModalLabel", "aria-hidden": "true"}
        .modal-dialog.modal-xl
          .modal-content
            .modal-header
              %h5.modal-title#playbookModalLabel Playbook Details
              %button.btn-close{type: "button", "data-bs-dismiss": "modal", "aria-label": "Close"}
            .modal-body
              .row
                .col-md-6
                  #playbook-rating-chart{style: "height: 300px;"}
                .col-md-6
                  #playbook-participation-chart{style: "height: 300px;"}
              .row.mt-3
                .col-md-6
                  #playbook-conflict-personal-chart{style: "height: 250px;"}
                .col-md-6
                  #playbook-conflict-team-chart{style: "height: 250px;"}
              .row.mt-3
                .col-12
                  %h6 Recent Huddles
                  .table-responsive
                    %table.table.table-sm
                      %thead
                        %tr
                          %th Date
                          %th Organization
                          %th Participants
                          %th Avg Rating
                          %th Participation
                      %tbody#playbook-huddles-list
            .modal-footer
              %button.btn.btn-secondary{type: "button", "data-bs-dismiss": "modal"} Close

:javascript
  console.log('Huddles Review JavaScript loaded');
  
  // Chart data from Rails
  var chartData = #{raw @chart_data.to_json};
  var overallMetrics = #{raw @overall_metrics.to_json};
  var playbookMetrics = #{raw @playbook_metrics.to_json};
  
  console.log('Chart data loaded:', chartData);
  console.log('Overall metrics loaded:', overallMetrics);
  console.log('Playbook metrics count:', Object.keys(playbookMetrics).length);
  
  function initializeCharts() {
    console.log('Initializing charts...');
    console.log('Highcharts available:', typeof Highcharts !== 'undefined');
    
    try {
      // Rating Trends Chart
      if (chartData.rating_data && chartData.rating_data.length > 0) {
        console.log('Creating rating chart with data:', chartData.rating_data);
        Highcharts.chart('rating-chart', {
          chart: { type: 'line' },
          title: { text: 'Average Rating Over Time' },
          xAxis: { type: 'datetime', title: { text: 'Week' } },
          yAxis: { title: { text: 'Average Rating' }, min: 0, max: 20 },
          series: [{
            name: 'Average Rating',
            data: chartData.rating_data,
            color: '#007bff'
          }],
          tooltip: {
            formatter: function() {
              return '<b>' + Highcharts.dateFormat('%B %d, %Y', this.x) + '</b><br/>' +
                     '<b>Rating:</b> ' + this.y;
            }
          }
        });
        console.log('Rating chart created successfully');
      }
      
      // Participation Rate Chart
      if (chartData.participation_data && chartData.participation_data.length > 0) {
        console.log('Creating participation chart with data:', chartData.participation_data);
        Highcharts.chart('participation-chart', {
          chart: { type: 'line' },
          title: { text: 'Participation Rate' },
          xAxis: { type: 'datetime', title: { text: 'Week' } },
          yAxis: { title: { text: 'Participation Rate (%)' }, min: 0, max: 100 },
          series: [{
            name: 'Participation Rate',
            data: chartData.participation_data,
            color: '#28a745'
          }],
          tooltip: {
            formatter: function() {
              return '<b>' + Highcharts.dateFormat('%B %d, %Y', this.x) + '</b><br/>' +
                     '<b>Participation:</b> ' + this.y + '%';
            }
          }
        });
        console.log('Participation chart created successfully');
      }
      
      // Huddles per Week Chart
      if (chartData.huddles_data && chartData.huddles_data.length > 0) {
        console.log('Creating huddles chart with data:', chartData.huddles_data);
        Highcharts.chart('huddles-chart', {
          chart: { type: 'column' },
          title: { text: 'Huddles per Week' },
          xAxis: { type: 'datetime', title: { text: 'Week' } },
          yAxis: { title: { text: 'Number of Huddles' }, min: 0 },
          series: [{
            name: 'Huddles',
            data: chartData.huddles_data,
            color: '#ffc107'
          }],
          tooltip: {
            formatter: function() {
              return '<b>' + Highcharts.dateFormat('%B %d, %Y', this.x) + '</b><br/>' +
                     '<b>Huddles:</b> ' + this.y;
            }
          }
        });
        console.log('Huddles chart created successfully');
      }
      
      // Personal Conflict Styles Chart
      if (overallMetrics.personal_conflict_styles && Object.keys(overallMetrics.personal_conflict_styles).length > 0) {
        console.log('Creating personal conflict chart');
        var personalConflictData = Object.keys(overallMetrics.personal_conflict_styles).map(function(style) {
          return [style, overallMetrics.personal_conflict_styles[style]];
        });
        
        Highcharts.chart('personal-conflict-chart', {
          chart: { type: 'pie' },
          title: { text: 'Personal Conflict Styles' },
          series: [{
            name: 'Count',
            data: personalConflictData
          }],
          tooltip: {
            pointFormat: '{series.name}: <b>{point.y}</b> ({point.percentage:.1f}%)'
          }
        });
        console.log('Personal conflict chart created successfully');
      }
      
      // Team Conflict Styles Chart
      if (overallMetrics.team_conflict_styles && Object.keys(overallMetrics.team_conflict_styles).length > 0) {
        console.log('Creating team conflict chart');
        var teamConflictData = Object.keys(overallMetrics.team_conflict_styles).map(function(style) {
          return [style, overallMetrics.team_conflict_styles[style]];
        });
        
        Highcharts.chart('team-conflict-chart', {
          chart: { type: 'pie' },
          title: { text: 'Team Conflict Styles' },
          series: [{
            name: 'Count',
            data: teamConflictData
          }],
          tooltip: {
            pointFormat: '{series.name}: <b>{point.y}</b> ({point.percentage:.1f}%)'
          }
        });
        console.log('Team conflict chart created successfully');
      }
      
      // Rating Distribution Chart
      if (overallMetrics.rating_distribution && Object.keys(overallMetrics.rating_distribution).length > 0) {
        console.log('Creating rating distribution chart');
        Highcharts.chart('rating-distribution-chart', {
          chart: { type: 'column' },
          title: { text: 'Rating Distribution' },
          xAxis: {
            categories: Object.keys(overallMetrics.rating_distribution),
            title: { text: 'Rating Score' }
          },
          yAxis: { title: { text: 'Number of Feedbacks' }, min: 0 },
          series: [{
            name: 'Feedbacks',
            data: Object.values(overallMetrics.rating_distribution),
            color: '#6f42c1'
          }],
          tooltip: {
            formatter: function() {
              return '<b>Rating ' + this.x + '</b><br/>' +
                     '<b>Feedbacks:</b> ' + this.y;
            }
          }
        });
        console.log('Rating distribution chart created successfully');
      }
      
      // Playbook Trends Chart (if multiple playbooks)
      var playbookTrendsData = [];
      if (Object.keys(playbookMetrics).length > 1) {
        console.log('Creating playbook trends chart');
        playbookTrendsData = Object.keys(playbookMetrics).map(function(key) {
          var playbook = playbookMetrics[key];
          return {
            name: playbook.display_name,
            data: playbook.weekly_trends ? Object.keys(playbook.weekly_trends).sort().map(function(week) {
              return [new Date(week).getTime(), playbook.weekly_trends[week].average_rating];
            }) : []
          };
        });
      }

      var playbookTrendsChart = document.getElementById('playbook-trends-chart');
      if (playbookTrendsChart && playbookTrendsData.length > 0) {
        console.log('Creating playbook trends chart with data:', playbookTrendsData);
        Highcharts.chart('playbook-trends-chart', {
          chart: { type: 'line' },
          title: { text: 'Playbook Rating Trends' },
          xAxis: { type: 'datetime', title: { text: 'Week' } },
          yAxis: { title: { text: 'Average Rating' }, min: 0, max: 20 },
          series: playbookTrendsData,
          tooltip: {
            formatter: function() {
              return '<b>' + Highcharts.dateFormat('%B %d, %Y', this.x) + '</b><br/>' +
                     '<b>' + this.series.name + ':</b> ' + this.y;
            }
          },
          legend: { enabled: true }
        });
        console.log('Playbook trends chart created successfully');
      }

      // Playbook Modal Event Handler (using vanilla JS instead of jQuery)
      var playbookModal = document.getElementById('playbookModal');
      if (playbookModal) {
        playbookModal.addEventListener('show.bs.modal', function (event) {
          console.log('Playbook modal opening');
          var button = event.relatedTarget;
          var playbookId = button.getAttribute('data-playbook-id');
          var playbook = playbookMetrics[playbookId]; // Direct access using ID as key

          if (playbook) {
            console.log('Loading playbook data for modal:', playbook);
            var modalLabel = document.getElementById('playbookModalLabel');
            if (modalLabel) {
              modalLabel.innerHTML = '<a href="/organizations/' + playbook.organization_id + '/huddle_playbooks/' + playbook.id + '" class="text-decoration-none">' + playbook.display_name + '</a> Details';
            }

            var ratingData = playbook.weekly_trends ?
              Object.keys(playbook.weekly_trends).sort().map(function(week) {
                return [new Date(week).getTime(), playbook.weekly_trends[week].average_rating];
              }) : [];

            Highcharts.chart('playbook-rating-chart', {
              chart: { type: 'line' },
              title: { text: 'Rating Trends' },
              xAxis: { type: 'datetime' },
              yAxis: { title: { text: 'Average Rating' }, min: 0, max: 20 },
              series: [{ name: 'Rating', data: ratingData, color: '#007bff' }],
              tooltip: {
                formatter: function() {
                  return '<b>' + Highcharts.dateFormat('%B %d, %Y', this.x) + '</b><br/>' +
                         '<b>Rating:</b> ' + this.y;
                }
              }
            });

            var participationData = playbook.weekly_trends ?
              Object.keys(playbook.weekly_trends).sort().map(function(week) {
                return [new Date(week).getTime(), playbook.weekly_trends[week].participation_rate];
              }) : [];

            Highcharts.chart('playbook-participation-chart', {
              chart: { type: 'line' },
              title: { text: 'Participation Trends' },
              xAxis: { type: 'datetime' },
              yAxis: { title: { text: 'Participation Rate (%)' }, min: 0, max: 100 },
              series: [{ name: 'Participation', data: participationData, color: '#28a745' }],
              tooltip: {
                formatter: function() {
                  return '<b>' + Highcharts.dateFormat('%B %d, %Y', this.x) + '</b><br/>' +
                         '<b>Participation:</b> ' + this.y + '%';
                }
              }
            });

            var personalConflictData = playbook.personal_conflict_styles ?
              Object.keys(playbook.personal_conflict_styles).map(function(style) {
                return [style, playbook.personal_conflict_styles[style]];
              }) : [];

            Highcharts.chart('playbook-conflict-personal-chart', {
              chart: { type: 'pie' },
              title: { text: 'Personal Conflict Styles' },
              series: [{ name: 'Count', data: personalConflictData }],
              tooltip: { pointFormat: '{series.name}: <b>{point.y}</b> ({point.percentage:.1f}%)' }
            });

            var teamConflictData = playbook.team_conflict_styles ?
              Object.keys(playbook.team_conflict_styles).map(function(style) {
                return [style, playbook.team_conflict_styles[style]];
              }) : [];

            Highcharts.chart('playbook-conflict-team-chart', {
              chart: { type: 'pie' },
              title: { text: 'Team Conflict Styles' },
              series: [{ name: 'Count', data: teamConflictData }],
              tooltip: { pointFormat: '{series.name}: <b>{point.y}</b> ({point.percentage:.1f}%)' }
            });

            var huddlesList = '';
            if (playbook.huddles) {
              playbook.huddles.forEach(function(huddle) {
                huddlesList += '<tr>' +
                  '<td>' + new Date(huddle.started_at).toLocaleDateString() + '</td>' +
                  '<td>' + huddle.organization.display_name + '</td>' +
                  '<td>' + (huddle.huddle_participants_count || huddle.huddle_participants.length) + '</td>' +
                  '<td>' + (huddle.average_rating || 'N/A') + '</td>' +
                  '<td>' + (huddle.participation_rate || 'N/A') + '%</td>' +
                  '</tr>';
              });
            }
            var huddlesListElement = document.getElementById('playbook-huddles-list');
            if (huddlesListElement) {
              huddlesListElement.innerHTML = huddlesList;
            }
            console.log('Playbook modal charts created successfully');
          }
        });
      }

      console.log('All charts initialized successfully');
      
      // Initialize popovers after charts are done
      initializePopovers();
    } catch (error) {
      console.error('Error initializing charts:', error);
    }
  }
  
  // Initialize Bootstrap popovers for participant data
  function initializePopovers() {
    console.log('Initializing popovers...');
    var popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
    var popoverList = popoverTriggerList.map(function (popoverTriggerEl) {
      return new bootstrap.Popover(popoverTriggerEl, {
        html: true,
        sanitize: false
      });
    });
    console.log('Popovers initialized:', popoverList.length);
  }
  
  // Multiple initialization strategies
  function tryInitializeCharts() {
    console.log('Attempting to initialize charts...');
    console.log('Document ready state:', document.readyState);
    console.log('Highcharts available:', typeof Highcharts !== 'undefined');
    
    if (typeof Highcharts !== 'undefined' && document.readyState === 'complete') {
      console.log('Both Highcharts and DOM are ready, initializing...');
      initializeCharts();
    } else if (typeof Highcharts !== 'undefined') {
      console.log('Highcharts available but DOM not complete, waiting...');
      setTimeout(tryInitializeCharts, 100);
    } else {
      console.log('Highcharts not available, waiting...');
      setTimeout(tryInitializeCharts, 100);
    }
  }
  
  // Wait for both DOM and Highcharts to be ready
  var attempts = 0;
  function waitForHighcharts() {
    attempts++;
    console.log('Waiting for Highcharts... (attempt ' + attempts + ')');
    
    if (typeof Highcharts !== 'undefined') {
      console.log('Highcharts found, initializing charts');
      initializeCharts();
    } else if (attempts < 100) { // Wait up to 10 seconds
      setTimeout(waitForHighcharts, 100);
    } else {
      console.error('Highcharts failed to load after 10 seconds. Trying alternative CDN...');
      loadHighchartsAlternative();
    }
  }
  
  function loadHighchartsAlternative() {
    console.log('Loading Highcharts from alternative CDN...');
    var script = document.createElement('script');
    script.src = 'https://cdnjs.cloudflare.com/ajax/libs/highcharts/11.3.0/highcharts.js';
    script.onload = function() {
      console.log('Highcharts loaded from alternative CDN');
      initializeCharts();
    };
    script.onerror = function() {
      console.error('Failed to load Highcharts from alternative CDN');
    };
    document.head.appendChild(script);
  }
  
  // Multiple event listeners to ensure initialization
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', function() {
      console.log('DOMContentLoaded fired');
      waitForHighcharts();
    });
  } else {
    console.log('Document already loaded, checking Highcharts');
    waitForHighcharts();
  }
  
  // Also try on window load
  window.addEventListener('load', function() {
    console.log('Window load fired');
    tryInitializeCharts();
  });
  
  // Immediate attempt
  console.log('Making immediate attempt to initialize');
  tryInitializeCharts(); 
- content_for :header do
  Create Quick Observation
- content_for :return_url do
  = @return_url || organization_observations_path(organization)
- content_for :return_text do
  = @return_text || 'Back'

.card.mb-3
  .card-header
    %h5.mb-0
      %i.bi.bi-person-check.me-2
      Observation Details
      - if @observation.persisted? && @observation.draft?
        .mt-2
          %small.text-muted
            = link_to "draft", organization_observation_path(organization, @observation), class: "text-muted text-decoration-none"
            = " saved at "
            = @observation.updated_at.strftime("%l:%M %p on %B %d, %Y")
      - elsif @observation.new_record?
        .mt-2
          %small.text-muted
            This observation will be saved as a draft when you add assignments or publish.
  .card-body
    - form_url = @observation.persisted? ? update_draft_organization_observation_path(organization, @observation) : update_draft_organization_observation_path(organization, :new)
    = form_with model: @observation, url: form_url, method: :post, local: true, data: { turbo: false, turbo_method: false }, html: { id: 'observation_form' } do |form|
      / Add _method field only for buttons that need PATCH (Add Assignments and default form submission)
      = hidden_field_tag '_method', 'patch', id: 'form_method_field'
      / Explicitly include CSRF token (form_with should add this, but ensuring it's present for ngrok)
      = hidden_field_tag :authenticity_token, form_authenticity_token
      - if @observation.errors.any?
        .alert.alert-danger
          %h6 Please correct the following errors:
          %ul.mb-0
            - @observation.errors.full_messages.each do |message|
              %li= message
      
      / Hidden fields for publish action
      = hidden_field_tag :return_url, @return_url
      = hidden_field_tag :return_text, @return_text
      = hidden_field_tag :show_observations_for, params[:show_observations_for]
      -# Preserve observee_ids through form submissions
      - @observation.observees.each do |observee|
        = hidden_field_tag "observee_ids[]", observee.teammate_id
      
      .mb-3
        %label.form-label
          %strong Who are you observing?
        - @observation.observees.each do |observee|
          %span.badge.bg-primary.me-1
            = observee.teammate.person.display_name
      
      .mb-3
        = form.label :story, "What happened?", class: 'form-label'
        = form.text_area :story, id: 'observation_story', class: 'form-control', rows: 5, placeholder: 'Tell the story of what happened... Be specific about what you observed and why it matters.'
        .form-text Markdown is supported for formatting.
      
      = render 'organizations/observations/feelings_fields', form: form, observation: @observation, layout: 'row'
      
      .mb-3
        = form.label :privacy_level, "Privacy Level", class: 'form-label'
        - Observation.privacy_levels.keys.each do |key|
          .form-check
            = form.radio_button :privacy_level, key, class: 'form-check-input'
            = form.label :"privacy_level_#{key}", class: 'form-check-label' do
              - case key
              - when 'observer_only'
                üîí Just for me (Journal)
              - when 'observed_only'
                üë§ Just for them
              - when 'managers_only'
                üëî For their managers
              - when 'observed_and_managers'
                üë• For them and their managers
              - when 'public_observation'
                üåç Public to organization
      
      / Rateable sections
      - if @assignments.any?
        .mb-3
          %h6.text-primary Assignments
          -# For unsaved observations, get assignments from built observation_ratings
          -# For persisted observations, use the association
          - assignment_ratings = @observation.observation_ratings.select { |or_obj| or_obj.rateable_type == 'Assignment' }
          - if assignment_ratings.any?
            - assignment_ratings.each do |rating_obj|
              - assignment = rating_obj.rateable
              - next unless assignment.present?
              .card.mb-2
                .card-body
                  .d-flex.justify-content-between.align-items-center
                    %div
                      %strong= assignment.title
                      .mt-2
                        = render 'organizations/observations/rating_buttons', 
                                 rating: rating_obj.rating,
                                 input_name: "observation[observation_ratings_attributes][assignment_#{assignment.id}][rating]"
                        -# Include hidden fields for rateable_type and rateable_id
                        - if rating_obj.new_record? || rating_obj.id.nil?
                          = hidden_field_tag "observation[observation_ratings_attributes][assignment_#{assignment.id}][rateable_type]", 'Assignment'
                          = hidden_field_tag "observation[observation_ratings_attributes][assignment_#{assignment.id}][rateable_id]", assignment.id
                        - else
                          = hidden_field_tag "observation[observation_ratings_attributes][assignment_#{assignment.id}][id]", rating_obj.id
                          = hidden_field_tag "observation[observation_ratings_attributes][assignment_#{assignment.id}][rateable_type]", 'Assignment'
                          = hidden_field_tag "observation[observation_ratings_attributes][assignment_#{assignment.id}][rateable_id]", assignment.id
          = form.submit 'Add Assignments', 
                        class: 'btn btn-sm btn-outline-primary',
                        name: 'save_and_add_assignments',
                        value: 'Add Assignments',
                        onclick: "document.getElementById('form_method_field').value = 'patch'; return true;"
      
      .d-flex.gap-2.mt-3
        -# Publish button - submit form to publish action (POST, no _method)
        = form.submit "Publish & Return to #{@return_text}", 
                      class: 'btn btn-primary',
                      formaction: publish_organization_observation_path(organization, @observation.new_record? ? :new : @observation),
                      formmethod: :post,
                      name: 'publish',
                      onclick: "document.getElementById('form_method_field').remove(); return true;"
        -# Cancel button - submit form to cancel action (POST, no _method)
        - cancel_id = @observation.new_record? ? :new : @observation
        = form.submit 'Cancel',
                      class: 'btn btn-outline-danger',
                      formaction: cancel_organization_observation_path(organization, cancel_id),
                      formmethod: :post,
                      name: 'cancel',
                      onclick: "document.getElementById('form_method_field').remove(); return true;",
                      data: { disable_with: 'Canceling...' }


- content_for :header do
  .d-flex.justify-content-between.align-items-center.mb-2
    %h1.mb-0{id: "page-title"}
      %i.bi.bi-plus-circle.me-2
      Create Observation
    .d-flex.align-items-center
      = content_for :header_action

.mb-4
  = content_for :go_back_link

- content_for :go_back_link do
  = link_to organization_observations_path(@organization), class: "text-muted text-decoration-none" do
    %i.bi.bi-arrow-left.me-2
    Back to Observations

- content_for :header_action do
  .text-muted
    Step 1 of 3

/ Progress indicator
.card.mb-4
  .card-body
    .progress.mb-3.progress-thin
      .progress-bar.progress-bar-step-1{role: "progressbar", 'aria-valuenow': "33", 'aria-valuemin': "0", 'aria-valuemax': "100"}
    .d-flex.justify-content-between
      .text-primary.fw-bold Step 1: Who, When, What, How
      .text-muted Step 2: Ratings & Privacy
      .text-muted Step 3: Review & Manage

.card
  .card-header
    %h5.mb-0
      %i.bi.bi-person-plus.me-2
      Who, When, What, How
  .card-body
    = form_with model: @form, url: organization_observations_path(@organization), local: true, class: 'needs-validation', novalidate: true do |form|
      - if @form.errors.any?
        .alert.alert-danger
          %h6 Please correct the following errors:
          %ul.mb-0
            - @form.errors.full_messages.each do |message|
              %li= message
      
      .row
        .col-md-6
          .mb-4
            = form.label :observees, "Who are you observing?", class: 'form-label'
            .card.border
              .card-body.teammate-selector-body
                %h6.text-muted Individuals
                - @organization.teammates.includes(:person).each do |teammate|
                  .form-check.mb-2
                    = check_box_tag 'observation[teammate_ids][]', teammate.id, @form.teammate_ids&.include?(teammate.id.to_s), class: 'form-check-input teammate-checkbox', id: "observation_teammate_ids_#{teammate.id}"
                    = label_tag "observation_teammate_ids_#{teammate.id}", teammate.person.preferred_name || teammate.person.first_name, class: 'form-check-label'
                    %small.text-muted.ms-2
                      = teammate.person.email
                
                .text-muted.mt-2#selected-count
                  No one selected
          
          .mb-4
            = form.label :observed_at, "When did this happen?", class: 'form-label'
            = form.datetime_local_field :observed_at, class: 'form-control', value: Time.current.strftime('%Y-%m-%dT%H:%M')
        
        .col-md-6
          .mb-4
            = form.label :story, "What happened?", class: 'form-label'
            = form.text_area :story, class: 'form-control', rows: 8, placeholder: 'Tell the story of what happened... Be specific about what you observed and why it matters.'
            .form-text Markdown is supported for formatting.
          
          .mb-4
            = form.label :primary_feeling, "How did this make you feel?", class: 'form-label'
            = form.select :primary_feeling, options_for_select(Feelings::FEELINGS.map { |f| ["#{f[:display]} #{f[:discrete_feeling].to_s.humanize}", f[:discrete_feeling].to_s] }, @form.primary_feeling), { prompt: 'Select a feeling...' }, { class: 'form-select' }
          
          .mb-4
            = form.label :secondary_feeling, "Secondary feeling (optional)", class: 'form-label'
            = form.select :secondary_feeling, options_for_select(Feelings::FEELINGS.map { |f| ["#{f[:display]} #{f[:discrete_feeling].to_s.humanize}", f[:discrete_feeling].to_s] }, @form.secondary_feeling), { prompt: 'Select a secondary feeling...', include_blank: 'None' }, { class: 'form-select' }
      
      .d-flex.justify-content-between
        = link_to 'Cancel', organization_observations_path(@organization), class: 'btn btn-secondary'
        = form.submit 'Next: Ratings & Privacy', class: 'btn btn-primary', name: 'step', value: '2'

:javascript
  document.addEventListener('DOMContentLoaded', function() {
    // Handle team selection expanding to individuals
    document.querySelectorAll('.team-checkbox').forEach(function(checkbox) {
      checkbox.addEventListener('change', function() {
        var teamId = this.dataset.teamId;
        var teamMembers = document.querySelectorAll('[data-team-id="' + teamId + '"]');
        
        if (this.checked) {
          // Check all team members
          teamMembers.forEach(function(member) {
            member.checked = true;
          });
        } else {
          // Uncheck all team members
          teamMembers.forEach(function(member) {
            member.checked = false;
          });
        }
        
        updateSelectedCount();
      });
    });
    
    // Handle individual teammate selection
    document.querySelectorAll('.teammate-checkbox').forEach(function(checkbox) {
      checkbox.addEventListener('change', function() {
        updateSelectedCount();
      });
    });
    
    function updateSelectedCount() {
      var selected = document.querySelectorAll('.teammate-checkbox:checked');
      var countElement = document.getElementById('selected-count');
      
      if (selected.length === 0) {
        countElement.textContent = 'No one selected';
      } else if (selected.length === 1) {
        countElement.textContent = '1 person selected';
      } else {
        countElement.textContent = selected.length + ' people selected';
      }
    }
  });

- if @position.errors.any?
  .alert.alert-danger
    %h5= "#{pluralize(@position.errors.count, "error")} prohibited this position from being saved:"
    %ul.mb-0
      - @position.errors.full_messages.each do |message|
        %li= message

.row
  .col-md-6
    .mb-3
      = form.label :position_type_id, "Position Type", class: "form-label"
      .d-flex
        = form.select :position_type_id, 
          options_from_collection_for_select(@position_types, :id, :external_title, @position.position_type_id), 
          { prompt: 'Select a position type' }, 
          { class: "form-select", required: true, id: "position_type_select" }
        = link_to new_position_type_path, class: "btn btn-outline-secondary ms-2", target: "_blank" do
          %i.bi.bi-plus
      %small.form-text.text-muted Choose the type of position or create a new one
  
  .col-md-6
    .mb-3
      = form.label :position_level_id, "Position Level", class: "form-label"
      = form.select :position_level_id, 
        options_from_collection_for_select(@position_levels, :id, :level_name, @position.position_level_id), 
        { prompt: 'Select a position level' }, 
        { class: "form-select", required: true, id: "position_level_select" }
      %small.form-text.text-muted Choose the level within the selected position type

.row
  .col-md-12
    .mb-3
      = form.label :position_summary, "Position Summary", class: "form-label"
      = form.text_area :position_summary, class: "form-control", rows: 4,
        placeholder: "Optional description of this position's responsibilities and expectations..."
      %small.form-text.text-muted A brief description of what this position entails

.row
  .col-md-6
    .mb-3
      = form.label :required_assignment_ids, "Required Assignments", class: "form-label"
      = form.select :required_assignment_ids, 
        options_from_collection_for_select(@assignments, :id, :title, @position.required_assignments.map(&:assignment_id)), 
        { prompt: 'Select required assignments' }, 
        { class: "form-select", multiple: true, size: 6 }
      %small.form-text.text-muted Assignments that must be completed for this position
  
  .col-md-6
    .mb-3
      = form.label :suggested_assignment_ids, "Suggested Assignments", class: "form-label"
      = form.select :suggested_assignment_ids, 
        options_from_collection_for_select(@assignments, :id, :title, @position.suggested_assignments.map(&:assignment_id)), 
        { prompt: 'Select suggested assignments' }, 
        { class: "form-select", multiple: true, size: 6 }
      %small.form-text.text-muted Optional assignments that would be beneficial for this position

.row
  .col-md-6
    .mb-3
      = form.label :published_source_url, "Published External Reference", class: "form-label"
      = form.url_field :published_source_url, class: "form-control", 
        value: @position.published_url,
        placeholder: "https://docs.google.com/document/d/..."
      %small.form-text.text-muted URL to the published version of this position
  
  .col-md-6
    .mb-3
      = form.label :draft_source_url, "Draft External Reference", class: "form-label"
      = form.url_field :draft_source_url, class: "form-control", 
        value: @position.draft_url,
        placeholder: "https://docs.google.com/document/d/..."
      %small.form-text.text-muted URL to the draft version of this position

.row
  .col-md-12
    .d-flex.justify-content-between
      = link_to "Cancel", positions_path, class: "btn btn-outline-secondary"
      = form.submit class: "btn btn-primary"

:javascript
  document.addEventListener('DOMContentLoaded', function() {
    const positionTypeSelect = document.getElementById('position_type_select');
    const positionLevelSelect = document.getElementById('position_level_select');
    
    if (positionTypeSelect && positionLevelSelect) {
      positionTypeSelect.addEventListener('change', function() {
        const positionTypeId = this.value;
        if (positionTypeId) {
          fetch(`/positions/position_levels?position_type_id=${positionTypeId}`)
            .then(response => response.json())
            .then(data => {
              positionLevelSelect.innerHTML = '<option value="">Select a position level</option>';
              data.forEach(level => {
                const option = document.createElement('option');
                option.value = level.id;
                option.textContent = level.level_name;
                positionLevelSelect.appendChild(option);
              });
            });
        } else {
          positionLevelSelect.innerHTML = '<option value="">Select a position level</option>';
        }
      });
    }
  }); 
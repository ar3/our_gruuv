- if @position.errors.any?
  .alert.alert-danger
    %h5= "#{pluralize(@position.errors.count, "error")} prohibited this position from being saved:"
    %ul.mb-0
      - @position.errors.full_messages.each do |message|
        %li= message

.row
  .col-md-6
    .mb-3
      = form.label :position_type_id, "Position Type", class: "form-label"
      .d-flex
        = form.select :position_type_id, 
          options_from_collection_for_select(@position_types, :id, :external_title, @position.position_type_id), 
          { prompt: 'Select a position type' }, 
          { class: "form-select", required: true, id: "position_type_select" }
        = link_to new_position_type_path, class: "btn btn-outline-secondary ms-2", target: "_blank" do
          %i.bi.bi-plus
      %small.form-text.text-muted Choose the type of position or create a new one
  
  .col-md-6
    .mb-3
      = form.label :position_level_id, "Position Level", class: "form-label"
      = form.select :position_level_id, 
        options_from_collection_for_select(@position_levels, :id, :level_name, @position.position_level_id), 
        { prompt: 'Select a position level' }, 
        { class: "form-select", required: true, id: "position_level_select" }
      %small.form-text.text-muted Choose the level within the selected position type

.row
  .col-md-12
    .mb-3
      = form.label :position_summary, "Position Summary", class: "form-label"
      = form.text_area :position_summary, class: "form-control", rows: 4,
        placeholder: "Optional description of this position's responsibilities and expectations..."
      %small.form-text.text-muted A brief description of what this position entails

.row
  .col-md-6
    .mb-3
      = form.label :required_assignments, "Required Assignments", class: "form-label"
      .border.rounded.p-3.bg-light
        .mb-2#required-tags
          - @position.required_assignments.each do |pa|
            .badge.bg-primary.me-2.mb-2.d-inline-flex.align-items-center
              = pa.assignment.title
              %button.btn-close.btn-close-white.ms-2.btn-sm{"data-assignment-id" => pa.assignment_id, "data-type" => "required", :type => "button"}
        = form.select :new_required_assignment_id, 
          options_from_collection_for_select(@assignments.reject { |a| @position.required_assignments.map(&:assignment_id).include?(a.id) }, :id, :title), 
          { prompt: 'Add required assignment' }, 
          { class: "form-select", id: "required-assignment-select" }
        %small.form-text.text-muted Assignments that must be completed for this position
  
  .col-md-6
    .mb-3
      = form.label :suggested_assignments, "Suggested Assignments", class: "form-label"
      .border.rounded.p-3.bg-light
        .mb-2#suggested-tags
          - @position.suggested_assignments.each do |pa|
            .badge.bg-info.me-2.mb-2.d-inline-flex.align-items-center
              = pa.assignment.title
              %button.btn-close.btn-close-white.ms-2.btn-sm{"data-assignment-id" => pa.assignment_id, "data-type" => "suggested", :type => "button"}
        = form.select :new_suggested_assignment_id, 
          options_from_collection_for_select(@assignments.reject { |a| @position.suggested_assignments.map(&:assignment_id).include?(a.id) }, :id, :title), 
          { prompt: 'Add suggested assignment' }, 
          { class: "form-select", id: "suggested-assignment-select" }
        %small.form-text.text-muted Optional assignments that would be beneficial for this position

.row
  .col-md-6
    .mb-3
      = form.label :published_source_url, "Published External Reference", class: "form-label"
      = form.url_field :published_source_url, class: "form-control", 
        value: @position.published_url,
        placeholder: "https://docs.google.com/document/d/..."
      %small.form-text.text-muted URL to the published version of this position
  
  .col-md-6
    .mb-3
      = form.label :draft_source_url, "Draft External Reference", class: "form-label"
      = form.url_field :draft_source_url, class: "form-control", 
        value: @position.draft_url,
        placeholder: "https://docs.google.com/document/d/..."
      %small.form-text.text-muted URL to the draft version of this position

.row
  .col-md-12
    .d-flex.justify-content-between
      = link_to "Cancel", positions_path, class: "btn btn-outline-secondary"
      = form.submit class: "btn btn-primary"

:javascript
  document.addEventListener('DOMContentLoaded', function() {
    const positionTypeSelect = document.getElementById('position_type_select');
    const positionLevelSelect = document.getElementById('position_level_select');
    
    if (positionTypeSelect && positionLevelSelect) {
      positionTypeSelect.addEventListener('change', function() {
        const positionTypeId = this.value;
        if (positionTypeId) {
          fetch(`/positions/position_levels?position_type_id=${positionTypeId}`)
            .then(response => response.json())
            .then(data => {
              positionLevelSelect.innerHTML = '<option value="">Select a position level</option>';
              data.forEach(level => {
                const option = document.createElement('option');
                option.value = level.id;
                option.textContent = level.level_name;
                positionLevelSelect.appendChild(option);
              });
            });
        } else {
          positionLevelSelect.innerHTML = '<option value="">Select a position level</option>';
        }
      });
    }

    // Assignment tag functionality
    const requiredSelect = document.getElementById('required-assignment-select');
    const suggestedSelect = document.getElementById('suggested-assignment-select');
    const requiredTags = document.getElementById('required-tags');
    const suggestedTags = document.getElementById('suggested-tags');

    function addAssignmentTag(select, tagsContainer, type) {
      const assignmentId = select.value;
      const assignmentTitle = select.options[select.selectedIndex].text;
      
      if (assignmentId && assignmentTitle !== 'Add required assignment' && assignmentTitle !== 'Add suggested assignment') {
        const tag = document.createElement('div');
        tag.className = `badge ${type === 'required' ? 'bg-primary' : 'bg-info'} me-2 mb-2 d-inline-flex align-items-center`;
        tag.innerHTML = `
          ${assignmentTitle}
          <button class="btn-close btn-close-white ms-2 btn-sm" data-assignment-id="${assignmentId}" data-type="${type}" type="button"></button>
        `;
        tagsContainer.appendChild(tag);
        
        // Remove from select options
        select.remove(select.selectedIndex);
        select.selectedIndex = 0;
        
        // Add hidden input for form submission
        const hiddenInput = document.createElement('input');
        hiddenInput.type = 'hidden';
        hiddenInput.name = `position[${type}_assignment_ids][]`;
        hiddenInput.value = assignmentId;
        select.parentNode.appendChild(hiddenInput);
      }
    }

    function removeAssignmentTag(button) {
      const assignmentId = button.getAttribute('data-assignment-id');
      const type = button.getAttribute('data-type');
      const tag = button.closest('.badge');
      
      // Add back to select options
      const select = type === 'required' ? requiredSelect : suggestedSelect;
      const option = document.createElement('option');
      option.value = assignmentId;
      option.textContent = tag.textContent.trim();
      select.appendChild(option);
      
      // Remove hidden input
      const hiddenInputs = select.parentNode.querySelectorAll(`input[name="position[${type}_assignment_ids][]"]`);
      hiddenInputs.forEach(input => {
        if (input.value === assignmentId) {
          input.remove();
        }
      });
      
      // Remove tag
      tag.remove();
    }

    // Event listeners
    if (requiredSelect) {
      requiredSelect.addEventListener('change', () => addAssignmentTag(requiredSelect, requiredTags, 'required'));
    }
    
    if (suggestedSelect) {
      suggestedSelect.addEventListener('change', () => addAssignmentTag(suggestedSelect, suggestedTags, 'suggested'));
    }

    // Remove tag event delegation
    document.addEventListener('click', function(e) {
      if (e.target.classList.contains('btn-close')) {
        removeAssignmentTag(e.target);
      }
    });
  }); 
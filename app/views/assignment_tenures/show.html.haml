- content_for :go_back_link do
  = link_to person_path(@person), class: "go-back-link" do
    %i.bi.bi-arrow-left.me-2
    Back to #{@person.display_name}'s Profile

- content_for :header do
  .d-flex.justify-content-between.align-items-center
    %h1.mb-0 Assignment Management for #{@person.display_name}
    = link_to choose_assignments_person_assignment_tenures_path(@person), class: "btn btn-primary" do
      %i.bi.bi-plus.me-2
      Choose Assignments

- content_for :header_action do
  %button.btn.btn-outline-secondary{"data-bs-toggle" => "modal", "data-bs-target" => "#assignmentTenuresFilterModal", type: "button"}
    %i.bi.bi-funnel.me-2
    Filter & Sort

  - if current_person == @person
    .row.mb-3
      .col-12
        .alert.alert-info.text-center.py-3
          %h4.mb-2 ðŸŽ¯ Modify Your Job Description
          %p.mb-0 Use this page to adjust your assignment energy percentages and provide check-ins on how things are going.
.row.justify-content-center
  .col-lg-12
    .card.mb-4
      .card-header
        %h5.mb-0 Current Position
      .card-body
        .position-info.mb-4.p-3.bg-light.rounded
          .row.align-items-center
            .col-md-8
              %p.mb-0
                %strong= @current_employment.position.display_name
                %br
                %small.text-muted
                  Company: #{@current_employment.company.name}
                  %br
                  Started: #{@current_employment.started_at.strftime('%B %d, %Y')}
                  - if @current_employment.ended_at
                    %br
                    Ended: #{@current_employment.ended_at.strftime('%B %d, %Y')}
                  - else
                    %br
                    %span.text-success Duration: #{((Date.current - @current_employment.started_at.to_date).to_i / 30.44).round(1)} months
            .col-md-4.text-end
          = link_to "View Position Details", edit_organization_position_path(@current_employment.position.position_type.organization, @current_employment.position), class: "btn btn-outline-primary btn-sm"

        .card
          .card-header
            %h5.mb-0 My Assignments

          .card-body
            - if @assignment_data.any?
              = form_with url: person_assignment_tenures_path(@person), method: :patch, local: true do |form|
                - is_employee_view = current_person == @person
                - is_manager_view = !is_employee_view
                
                - if is_employee_view
                  = render 'employee_assignments_table', assignment_data: @assignment_data, form: form
                - else
                  = render 'manager_assignments_table', assignment_data: @assignment_data, form: form

                .row.mt-4
                  .col-6
                    .energy-total.alert.alert-info
                      %strong Energy Total: 
                      %span#energy-total 0%
                      %span#energy-status
                  .col-6.text-end
                    = form.submit "Update #{@person.first_name}'s Assignments", class: "btn btn-primary"
            - else
              .alert.alert-info
                %h6.mb-2
                  %i.bi.bi-info-circle.me-2
                  No Assignments Found
                %p.mb-2 No assignments found for your current position.
                = link_to "Choose Assignments", choose_assignments_person_assignment_tenures_path(@person), class: "btn btn-primary btn-sm"

/ Modal for Filter & Sort
#assignmentTenuresFilterModal.modal.fade{"aria-hidden" => "true", "aria-labelledby" => "assignmentTenuresFilterModalLabel", tabindex: "-1"}
  .modal-dialog.modal-lg
    .modal-content
      .modal-header
        %h5.modal-title#assignmentTenuresFilterModalLabel
          %i.bi.bi-funnel.me-2
          Filter & Sort Assignments (coming soon)
        %button.btn-close{"aria-label" => "Close", "data-bs-dismiss" => "modal", type: "button"}
        .modal-body
          .row
            .col-md-6
              %h6.mb-3
                %i.bi.bi-funnel.me-2
                Filters
              .mb-3
                %label.form-label Assignment Status
              .form-check
                %input.form-check-input{checked: "checked", type: "checkbox", name: "status", value: "active"}
                %label.form-check-label Active Assignments
              .form-check
                %input.form-check-input{type: "checkbox", name: "status", value: "inactive"}
                %label.form-check-label Inactive Assignments
            .mb-3
              %label.form-label Energy Level
              %select.form-select
                %option All Energy Levels
                %option Low (0-25%)
                %option Medium (26-75%)
                %option High (76-100%)
          .col-md-6
            %h6.mb-3
              %i.bi.bi-sort-down.me-2
              Sort Options
            .mb-3
              %label.form-label Sort By
              %select.form-select
                %option Assignment Name
                %option Energy Level
                %option Start Date
                %option Last Check-in
            .mb-3
              %label.form-label View Style
              .form-check
                %input.form-check-input{checked: "checked", type: "radio", name: "viewStyle", value: "form"}
                %label.form-check-label
                  %i.bi.bi-card-text.me-2
                  Form View
              .form-check
                %input.form-check-input{type: "radio", name: "viewStyle", value: "table"}
                %label.form-check-label
                  %i.bi.bi-table.me-2
                  Table View
            .mb-3
              %label.form-label Spotlight
              %select.form-select
                %option No Spotlight
                %option High Energy Assignments
                %option Recent Check-ins
                %option Overdue Check-ins
      .modal-footer
        %button.btn.btn-secondary{"data-bs-dismiss" => "modal", type: "button"} Cancel
        %button.btn.btn-primary.disabled{type: "button"}
          %i.bi.bi-check.me-2
          Apply Filters

- content_for :stylesheets do
  :css
    .disabled {
      opacity: 0.6;
      pointer-events: none;
    }
    
    .completion-status .badge {
      font-size: 0.75rem;
    }
    
    .table td {
      vertical-align: middle;
    }
    
    .table .form-control-sm, .table .form-select-sm {
      min-width: 120px;
    }
    
    .table .form-control-sm {
      resize: vertical;
    }
    
    .completion-toggle {
      transform: scale(0.8);
    }

- content_for :javascript do
  :javascript
    document.addEventListener('DOMContentLoaded', function() {
      // Handle completion toggles
      document.querySelectorAll('.completion-toggle').forEach(function(toggle) {
        toggle.addEventListener('change', function() {
          const targetId = this.dataset.target;
          const targetFields = document.getElementById(targetId);
          
          if (targetFields) {
            const inputs = targetFields.querySelectorAll('input, select, textarea');
            inputs.forEach(function(input) {
              input.disabled = this.checked;
            }.bind(this));
            
            // Update visual state
            if (this.checked) {
              targetFields.classList.add('disabled');
            } else {
              targetFields.classList.remove('disabled');
            }
          } else {
            // For table layout, disable fields in the same row
            const row = this.closest('tr');
            if (row) {
              const inputs = row.querySelectorAll('input, select, textarea');
              inputs.forEach(function(input) {
                if (input !== this) { // Don't disable the toggle itself
                  input.disabled = this.checked;
                }
              }.bind(this));
            }
          }
        });
      });

      // Energy percentage validation
      function calculateEnergyTotal() {
        const energySelects = document.querySelectorAll('.energy-select');
        let total = 0;
        
        energySelects.forEach(function(select) {
          const value = parseInt(select.value) || 0;
          total += value;
        });
        
        const totalElement = document.getElementById('energy-total');
        const statusElement = document.getElementById('energy-status');
        const alertElement = document.querySelector('.energy-total');
        
        if (totalElement) {
          totalElement.textContent = total + '%';
        }
        
        if (alertElement && statusElement) {
          // Remove existing status classes
          alertElement.classList.remove('alert-success', 'alert-warning', 'alert-danger');
          statusElement.innerHTML = '';
          
          if (total === 100) {
            alertElement.classList.add('alert-success');
            statusElement.innerHTML = ' <i class="bi bi-check-circle"></i> Perfect!';
          } else if (total > 100) {
            alertElement.classList.add('alert-danger');
            statusElement.innerHTML = ' <i class="bi bi-exclamation-triangle"></i> Over 100%!';
          } else if (total < 100) {
            alertElement.classList.add('alert-warning');
            statusElement.innerHTML = ' <i class="bi bi-info-circle"></i> Under 100%';
          }
        }
      }
      
      // Add event listeners to energy selects
      document.querySelectorAll('.energy-select').forEach(function(select) {
        select.addEventListener('change', calculateEnergyTotal);
      });
      
      // Calculate initial total
      calculateEnergyTotal();
    });

- policy = policy(@huddle)
- current_participant = @huddle.huddle_participants.find_by(person: @current_person)
- is_facilitator = current_participant&.facilitator? || @huddle.organization&.department_head == @current_person
.container.mt-4
  .row
    .col-12
      .d-flex.justify-content-between.align-items-center.mb-4
        %h1 Huddle Summary
        = link_to "‚Üê Back to Huddle", huddle_path(@huddle), class: "btn btn-outline-secondary"
      
      / Slack Integration Button
      
      .d-flex.justify-content-end.mb-3
        - if @huddle.slack_configured?
          = button_to "Post Summary to Slack", post_summary_to_slack_huddle_path(@huddle), 
              method: :post, 
              class: "btn btn-success",
              data: { confirm: "Post the current huddle summary to Slack?" }
        - else
          %button.btn.btn-outline-secondary{type: "button", 
              data: {bs_toggle: "popover", 
                      bs_placement: "left", 
                      bs_title: "Slack Not Configured", 
                      bs_content: "An admin needs to configure Slack for this organization. #{link_to 'Configure Slack', organization_slack_path(@huddle.organization), class: 'btn btn-sm btn-primary mt-2'}"}}
            %i.bi.bi-slack.me-2
            Post Summary to Slack
      
      .card.mb-4
        .card-header
          %h2.mb-0= @huddle.display_name
        .card-body
          .row
            .col-md-4.col-sm-12
              %p
                %strong Organization:
                = @huddle.organization.display_name
            .col-md-4.col-sm-12
              %p
                %strong{data: {bs_toggle: "tooltip", bs_placement: "top"}, title: "started at #format_time_in_user_timezone(@huddle.started_at)"} Status:
                = status_badge(@huddle.closed? ? 'inactive' : 'active', @huddle.status_with_time)
            .col-md-4.col-sm-12
              %p
                %strong Participants:
                = "#{@huddle.huddle_feedbacks.count} of #{@huddle.huddle_participants.count} participants submitted feedback"

  - if @huddle.huddle_feedbacks.any?
    .row
      .col-md-6
        .card.mb-4
          .card-header
            %h3.mb-0 Average Ratings
          .card-body
            - ratings = @huddle.average_rating_by_category
            - if ratings.any?
              .row
                .col-6
                  %p
                    %strong Informed:
                    = rating_badge(ratings[:informed])
                  %p
                    %strong Connected:
                    = rating_badge(ratings[:connected])
                .col-6
                  %p
                    %strong Goals:
                    = rating_badge(ratings[:goals])
                  %p
                    %strong Valuable:
                    = rating_badge(ratings[:valuable])
              .mt-3
                %h4 Overall Score
                %h2.text-center{class: text_class(nat_20_color(@huddle.nat_20_score))}= @huddle.nat_20_score
                %p.text-center.text-muted Nat 20 Score
            - else
              %p.text-muted No ratings available
      .col-md-6
        .card.mb-4
          .card-header
            %h3.mb-0 Insights
          .card-body
            - insights = @huddle.feedback_insights
            - if insights.any?
              %ul.list-unstyled
                - insights.each do |insight|
                  %li.mb-2
                    %i.bi.bi-lightbulb.me-2
                    = insight
            - else
              %p.text-muted No insights available yet
            

    .row
      .col-12
        .card.mb-4
          .card-header
            %h3.mb-0 Feedback Highlights
          .card-body
            - appreciations = @huddle.huddle_feedbacks.where.not(appreciation: [nil, '']).limit(3)
            - if appreciations.any?
              %h5 What went well:
              - appreciations.each do |feedback|
                .alert.alert-success
                  %i.bi.bi-heart.me-2
                  = feedback.appreciation
            - suggestions = @huddle.huddle_feedbacks.where.not(change_suggestion: [nil, '']).limit(3)
            - if suggestions.any?
              %h5.mt-3 Improvement suggestions:
              - suggestions.each do |feedback|
                .alert.alert-warning
                  %i.bi.bi-lightbulb.me-2
                  = feedback.change_suggestion
            - if appreciations.empty? && suggestions.empty?
              %p.text-muted No detailed feedback available yet
      
      / Conflict Styles Analysis
      - team_conflict_styles = @huddle.team_conflict_style_distribution
      - personal_conflict_styles = @huddle.personal_conflict_style_distribution
      .row
        .col-12
          .card.mb-4
            .card-header
              %h3.mb-0
                %i.bi.bi-graph-up.me-2
                Conflict Style Analysis
            .card-body
              .row
                .col-md-6
                  %h5.mb-3 Team Conflict Styles
                  - if team_conflict_styles.any?
                    - total_team = team_conflict_styles.values.sum
                    - team_conflict_styles.each do |style, count|
                      - percentage = (count.to_f / total_team * 100).round(1)
                      - color = conflict_style_color(style)
                      .mb-3
                        .d-flex.justify-content-between.align-items-center.mb-1
                          %strong= style
                          %span
                            = content_tag :span, count, class: "badge bg-#{color} me-1"
                            %small.text-muted (#{percentage}%)
                        .progress{style: "height: 6px;"}
                          .progress-bar{class: "bg-#{color}", style: "width: #{percentage}%"}
                  - else
                    .text-muted.text-center.py-4
                      %i.bi.bi-people.bi-2x.mb-2
                      %p.mb-0 No team conflict style data yet
                      %small Submit feedback to see team conflict style distribution
                    / Show all possible styles with zero counts
                    - @huddle.all_conflict_styles.each do |style|
                      .mb-2
                        .d-flex.justify-content-between.align-items-center.mb-1
                          %span.text-muted= style
                          %span
                            %span.badge.bg-light.text-muted.me-1 0
                            %small.text-muted (0%)
                        .progress{style: "height: 6px;"}
                          .progress-bar.bg-light{style: "width: 0%"}
                .col-md-6
                  %h5.mb-3 Personal Conflict Styles
                  - if personal_conflict_styles.any?
                    - total_personal = personal_conflict_styles.values.sum
                    - personal_conflict_styles.each do |style, count|
                      - percentage = (count.to_f / total_personal * 100).round(1)
                      - color = conflict_style_color(style)
                      .mb-3
                        .d-flex.justify-content-between.align-items-center.mb-1
                          %strong= style
                          %span
                            = content_tag :span, count, class: "badge bg-#{color} me-1"
                            %small.text-muted (#{percentage}%)
                        .progress{style: "height: 6px;"}
                          .progress-bar{class: "bg-#{color}", style: "width: #{percentage}%"}
                  - else
                    .text-muted.text-center.py-4
                      %i.bi.bi-person.bi-2x.mb-2
                      %p.mb-0 No personal conflict style data yet
                      %small Submit feedback to see personal conflict style distribution
                    / Show all possible styles with zero counts
                    - @huddle.all_conflict_styles.each do |style|
                      .mb-2
                        .d-flex.justify-content-between.align-items-center.mb-1
                          %span.text-muted= style
                          %span
                            %span.badge.bg-light.text-muted.me-1 0
                            %small.text-muted (0%)
                        .progress{style: "height: 6px;"}
                          .progress-bar.bg-light{style: "width: 0%"}
  - else
    .card.mb-4
      .card-body.text-center
        %h3.text-muted No feedback submitted yet
        %p.mb-4 This huddle summary will populate once participants submit feedback.
        = link_to "Submit Feedback", feedback_huddle_path(@huddle), class: "btn btn-primary"

  / Participants Table - Visible to all participants
  .row
    .col-12
      .card.mb-4
        .card-header
          %h3.mb-0 Participants
          - if is_facilitator
            %small.text-muted Facilitators can see detailed ratings and private notes
        .card-body
          .table-responsive
            %table.table.table-striped.table-hover
              %thead.table-dark
                %tr
                  %th Participant
                  %th Rating
                  %th Private Notes
              %tbody
                - @huddle.huddle_participants.includes(:person).each do |participant|
                  - feedback = @huddle.huddle_feedbacks.find_by(person: participant.person)
                  - has_facilitator_note = feedback&.private_facilitator.present?
                  - has_dept_head_note = feedback&.private_department_head.present?
                  - rating_score = feedback ? feedback.nat_20_score : nil
                  %tr{class: feedback ? '' : 'table-secondary'}
                    %td
                      %strong= participant.person.full_name
                      %br
                      %small.text-muted= participant.role_label || 'Participant'
                    %td
                      - if feedback
                        - if is_facilitator
                          %span{class: "rating-display", 
                               style: "cursor: pointer;", 
                               data: {bs_toggle: "popover", 
                                      bs_placement: "top", 
                                      bs_title: "#{participant.person.full_name}'s Ratings",
                                      bs_content: "<ul class='list-unstyled mb-0'><li><strong>Informed:</strong> #{feedback.informed_rating}/5</li><li><strong>Connected:</strong> #{feedback.connected_rating}/5</li><li><strong>Goals:</strong> #{feedback.goals_rating}/5</li><li><strong>Valuable:</strong> #{feedback.valuable_rating}/5</li><li><strong>Personal Conflict:</strong> #{feedback.personal_conflict_style || 'Not specified'}</li><li><strong>Team Conflict:</strong> #{feedback.team_conflict_style || 'Not specified'}</li></ul>"}}
                            = nat_20_badge(rating_score)
                        - else
                          = nat_20_badge(rating_score)
                      - else
                        %span.text-muted --
                    %td
                      - if is_facilitator
                        - if has_facilitator_note
                          %i.bi.bi-eye.text-info{style: "cursor: pointer;", 
                                               data: {bs_toggle: "popover", 
                                                      bs_placement: "left", 
                                                      bs_title: "Private Note for Facilitator", 
                                                      bs_content: feedback.private_facilitator}}
                        - elsif has_dept_head_note
                          %i.bi.bi-eye.text-info{style: "cursor: pointer;", 
                                               data: {bs_toggle: "popover", 
                                                      bs_placement: "left", 
                                                      bs_title: "Private Note for Department Head", 
                                                      bs_content: feedback.private_department_head}}
                        - elsif feedback
                          %i.bi.bi-eye-slash.text-muted 
                        - else
                          %i.bi.bi-eye-slash.text-muted 
                      - else
                        %i.bi.bi-eye-slash.text-muted{data: {bs_toggle: "tooltip", bs_placement: "top"}, title: "No visibility"}

  

  .d-flex.justify-content-between
    = link_to "‚Üê Back to Huddle", huddle_path(@huddle), class: "btn btn-outline-secondary"
    = link_to "View All My Huddles", my_huddles_path, class: "btn btn-outline-primary"
    
    :javascript
      // Initialize tooltips
      document.addEventListener('DOMContentLoaded', function() {
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
          return new bootstrap.Tooltip(tooltipTriggerEl)
        })
      })
      
      function showParticipantDetails(name, role, status, informed, connected, goals, valuable, total, personalConflict, teamConflict, appreciation, changeSuggestion, privateDeptHead, privateFacilitator) {
        // Populate modal fields
        document.getElementById('modalParticipantName').textContent = name;
        document.getElementById('modalParticipantRole').textContent = role;
        document.getElementById('modalParticipantStatus').textContent = status;
        
        // Ratings
        document.getElementById('modalInformedRating').textContent = informed !== null ? informed : '‚Äî';
        document.getElementById('modalConnectedRating').textContent = connected !== null ? connected : '‚Äî';
        document.getElementById('modalGoalsRating').textContent = goals !== null ? goals : '‚Äî';
        document.getElementById('modalValuableRating').textContent = valuable !== null ? valuable : '‚Äî';
        document.getElementById('modalTotalScore').textContent = total !== null ? total : '‚Äî';
        
        // Conflict styles
        const personalConflictDiv = document.getElementById('modalPersonalConflict');
        if (personalConflict) {
          personalConflictDiv.innerHTML = '<strong>' + personalConflict + '</strong><br><small class="text-muted">' + 
            (personalConflict === 'Collaborative' ? 'High assertiveness, high cooperativeness - Seeks win-win solutions' :
              personalConflict === 'Competing' ? 'High assertiveness, low cooperativeness - Pursues own concerns at others\' expense' :
              personalConflict === 'Compromising' ? 'Medium assertiveness, medium cooperativeness - Seeks middle ground' :
              personalConflict === 'Accommodating' ? 'Low assertiveness, high cooperativeness - Yields to others\' concerns' :
              personalConflict === 'Avoiding' ? 'Low assertiveness, low cooperativeness - Withdraws from conflict' : '') + '</small>';
        } else {
          personalConflictDiv.textContent = 'Not specified';
        }
        
        const teamConflictDiv = document.getElementById('modalTeamConflict');
        if (teamConflict) {
          teamConflictDiv.innerHTML = '<strong>' + teamConflict + '</strong><br><small class="text-muted">' + 
            (teamConflict === 'Collaborative' ? 'High assertiveness, high cooperativeness - Seeks win-win solutions' :
              teamConflict === 'Competing' ? 'High assertiveness, low cooperativeness - Pursues own concerns at others\' expense' :
              teamConflict === 'Compromising' ? 'Medium assertiveness, medium cooperativeness - Seeks middle ground' :
              teamConflict === 'Accommodating' ? 'Low assertiveness, high cooperativeness - Yields to others\' concerns' :
              teamConflict === 'Avoiding' ? 'Low assertiveness, low cooperativeness - Withdraws from conflict' : '') + '</small>';
        } else {
          teamConflictDiv.textContent = 'Not specified';
        }
        
        // Feedback
        const appreciationDiv = document.getElementById('modalAppreciation');
        if (appreciation) {
          appreciationDiv.innerHTML = '<div class="alert alert-success"><i class="bi bi-heart me-2"></i>' + appreciation + '</div>';
        } else {
          appreciationDiv.innerHTML = '<p class="text-muted">No appreciation shared</p>';
        }
        
        const changeSuggestionDiv = document.getElementById('modalChangeSuggestion');
        if (changeSuggestion) {
          changeSuggestionDiv.innerHTML = '<div class="alert alert-warning"><i class="bi bi-lightbulb me-2"></i>' + changeSuggestion + '</div>';
        } else {
          changeSuggestionDiv.innerHTML = '<p class="text-muted">No suggestions shared</p>';
        }
        
        const privateFeedbackDiv = document.getElementById('modalPrivateFeedback');
        let privateContent = '';
        if (privateDeptHead) {
          privateContent += '<div class="alert alert-info"><strong>For Department Head:</strong><br>' + privateDeptHead + '</div>';
        }
        if (privateFacilitator) {
          privateContent += '<div class="alert alert-info"><strong>For Facilitator:</strong><br>' + privateFacilitator + '</div>';
        }
        if (!privateContent) {
          privateContent = '<p class="text-muted">No private feedback</p>';
        }
        privateFeedbackDiv.innerHTML = privateContent;
        
        // Show modal
        const modal = new bootstrap.Modal(document.getElementById('participantDetailModal'));
        modal.show();
      }

  